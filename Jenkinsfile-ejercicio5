/*Ejercicio 5
Se implementará un pipeline similar al del ejercicio4, añadiendo una fase adicional después de la fase "Descarga de código fuente", llamada "Configuración del pipeline".
En la fase que se va a implementar se realizarán las siguientes acciones:
Lectura del fichero ci.properties
Asignación del valor de las variables:
    realizarCompilacion 
    analizarConSonar
    analizarConOWASP
    realizarPruebasUnitarias 
    realizarDespliegue

En el fichero, las variables se llamarán de igual manera.

Se realizará una asignación inicial, que son los valores por defecto para la ejecución del pipeline que serán sobreescritos tras la ejecución de la fase "Configuración del pipeline".

Una de las posibles soluciones, puede ser utilizar readProperties, y para ello es necesario tener instalado  "Pipeline Utility Steps"

*/
//Configuración repositorio 
def credencialesGIT = "userGitH"
def urlGIT = "https://github.com/jacampano/pruebasWebApp.git"
def rama = "main"


// Herramientas y servidores
def versionJDK = "JDK11"
def versionMaven = "Maven-3.8.6"
def dependencyCheckTool = "DC-7.3.0"
def sonarScannerTool = "SonarScanner"
def sonarToken = "SonarToken"
def instalacionSonar = "SonarLocal"

//Condiciones ejecución fases --
@Library('eslabones@main')
def realizarCompilacion = true
def analizarConSonar = true
def analizarConOWASP = true
def realizarPruebasUnitarias = true 
def realizarDespliegue = true



pipeline {
    
    agent any
          
    stages {
        // Preparación tareas previas. Ejecución de tareas previas preparatorias de la ejecución de la Tubería.        
        stage('Inicialización')
        {
            steps{
               
                info()
                cleanWs()
                /*
                script {
                    urlGIT=env.gitlabSourceRepoHttpUrl
                    rama=env.gitlabBranch
                }
                */
            }
        }

        stage('Descarga código fuente') {
            steps {
              
                echo "--- Sustituir implementación utilizada hasta ahora por la llamada correspondiente en la librería ---"
                checkout([$class: 'GitSCM',
                       branches: [[name: "${rama}"]],
                       doGenerateSubmoduleConfigurations: false,
                       extensions: [], gitTool: 'git', submoduleCfg: [],
                       userRemoteConfigs: [[credentialsId: "${credencialesGIT}", url: "${urlGIT}"]]])
              
            }
                
  
        }

        stage('Configuración pipeline') {
            steps {
                echo "--- Implementar lectura del archivo ci.properties para realizar la configuración del pipeline y saber que fases de deben ejecutar"
            }
        }
        
        stage('Compilación y empaquetado') {
              when {
                expression {
                    realizarCompilacion == true
                }
            }
          
                steps {
                    script {
                        
                        withEnv(["JAVA_HOME=${ tool versionJDK}"]) {
                            withMaven(maven: versionMaven) {

                            echo "--- Compilación y empaquetado ---"
                            echo "JAVA_HOME: $JAVA_HOME"
                            sh "mvn clean package -DskipTests"
                                       
                            }
                        }
         
                    }
                 
                }
            }
        
        
        //PRUEBAS DE COMPONENTES. Ejecución de pruebas individualizadas de los componentes que conforman el producto software. Estas pruebas no deben requerir el despliegue del producto.
        stage('Pruebas de Componentes'){
            stages {
                stage('Analisis estatico de código') {
                    when {
                        expression {
                           analizarConSonar == true
                          }
                     }

                    
                    steps {
                        catchError (buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {

                            echo "--- Sustituir implementación utilizada hasta ahora por la llamada correspondiente en la librería ---"                    
                
                        }
                }
                }

                stage('Umbral de Calidad') {

                     when {
                        expression {
                           analizarConSonar == true
                          }
                     }

                     steps {
                        catchError (buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            script {
                                echo "--- Sustituir implementación utilizada hasta ahora por la llamada correspondiente en la librería ---"
                            }
                            
                        }
                       
                    } 

                }

                stage('Analisis de dependencias') {
                    when {
                        expression {
                           analizarConOWASP == true
                          }
                     }

                    steps {
                        script {
                            try {
                                dependencyCheck additionalArguments: '''--format ALL''', odcInstallation: dependencyCheckTool
                            } catch (err) {
                                echo err.toString()
                            }
                        }

                    }

                    post {
                        success {
                            
                            echo "Acción a realizar si se ejecuta correctamente"

                        }
                    }
                }


                stage('Ejecución pruebas unitarias') {
                     when {
                        expression {
                           realizarPruebasUnitarias == true
                          }
                     }

  
                        steps {
                                                  
                            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                withEnv(["JAVA_HOME=${ tool versionJDK}"]) {
                                    withMaven(maven: versionMaven){

                                        sh "mvn test"
                                    }
                                }
                            }
 
                        }

                   post {
                        success {
                            echo "Acción a realizar si se ejecuta correctamente"
                         
                        }
                    }
                }

            }
           
            }//Fin pruebas de componentes
        

       

        //Aqui nueva fase que realiza el despliegue de un WAR.
        stage('Deploy') {
            when {
                expression {
                    analizarConOWASP == true
                    }
            }
             steps {
                    script {
                        deploy adapters: [tomcat9(credentialsId: "robot", path: '', url: "http://servidor.tomcat:8080/")], contextPath: "/pruebasWebApp", war: "**/*.war"
                    }
                }

        }

    }
        
        post {
            success {
                //dependencyCheckPublisher failedNewCritical: 5, failedNewHigh: 15, failedNewLow: 30, failedNewMedium: 15, failedTotalCritical: 10, failedTotalHigh: 30, failedTotalLow: 60, failedTotalMedium: 30, pattern: '**/dependency-check-report.xml', unstableNewCritical: 3, unstableNewHigh: 5, unstableNewLow: 25, unstableNewMedium: 15, unstableTotalCritical: 5, unstableTotalHigh: 20, unstableTotalLow: 50, unstableTotalMedium: 20
                echo "Acción cuando se completa con éxito"
            }
            aborted {
                
               echo "--- Aciones cuando se aborta ---"
                
            }
            failure {
                
                echo "-- Aciones cuando se falla ---"
              
                
            }

            always {
                echo "--- SE EJECUTA SIEMPRE ---"
            }
        } 
    }
